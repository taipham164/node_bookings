<!DOCTYPE html>
<html>
<head>
    <title>Square Tokenization Debug Test</title>
    <script src="https://web.squarecdn.com/v1/square.js"></script>
</head>
<body>
    <h1>Square Tokenization Debug</h1>
    <div id="debug-output"></div>
    
    <div>
        <label>Test Card Input:</label>
        <div id="card-container" style="border: 1px solid #ccc; padding: 10px; margin: 10px 0;">
            Loading...
        </div>
    </div>
    
    <div>
        <label>Postal Code:</label>
        <input type="text" id="postal-code" value="12345" />
    </div>    <button onclick="testTokenizeNow()">Test Tokenization</button>
    <button onclick="testTokenizeBasic()">Test Basic Tokenization (No Verification)</button>
    <button onclick="testCorrectSquareFormat()">üéØ Test OFFICIAL Square Format</button>
    <button onclick="testTokenizeVariations()">Test Verification Variations</button>
    <button onclick="testProductionCompliantFormat()">Test Production Compliant Formats</button>
    <button onclick="checkSDKCapabilities()">Check SDK Capabilities</button>
    
    <script>
        const APP_ID = '<%= process.env.SQ_APPLICATION_ID %>';
        const LOCATION_ID = '<%= process.env.SQ_LOCATION_ID %>';
        
        let card = null;
        
        function updateDebug(message, type = 'info') {
            const output = document.getElementById('debug-output');
            const time = new Date().toLocaleTimeString();
            const color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'black';
            output.innerHTML += `<div style="color: ${color};">[${time}] ${message}</div>`;
        }
          async function initSquare() {
            try {
                updateDebug('üîß Initializing Square...');
                updateDebug(`Square SDK version: ${window.Square.version || 'Unknown'}`);
                updateDebug(`App ID: ${APP_ID.substring(0, 15)}...`);
                updateDebug(`Location ID: ${LOCATION_ID}`);
                
                if (APP_ID.startsWith('sq0idp-')) {
                    updateDebug('‚úÖ Production Application ID format detected');
                } else if (APP_ID.startsWith('sandbox-')) {
                    updateDebug('‚ö†Ô∏è Sandbox Application ID format detected');
                } else {
                    updateDebug('‚ùå Unknown Application ID format');
                }
                
                const payments = window.Square.payments(APP_ID, LOCATION_ID);
                updateDebug('‚úÖ Payments instance created');
                
                card = await payments.card({
                    includeInputLabels: true
                });
                updateDebug('‚úÖ Card created');
                
                await card.attach('#card-container');
                updateDebug('‚úÖ Card attached');
                
            } catch (error) {
                updateDebug(`‚ùå Error: ${error.message}`, 'error');
            }
        }
        
        async function testTokenizeNow() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            const params = {
                billingContact: {
                    postalCode: postalCode
                },
                verificationDetails: {
                    intent: 'STORE',
                    customerInitiated: true,
                    sellerKeyedIn: false
                }
            };
            
            updateDebug('üîß Testing tokenization...');
            updateDebug(`Parameters: ${JSON.stringify(params)}`);            try {
                const result = await card.tokenize(params);
                updateDebug(`Full result: ${JSON.stringify(result)}`);
                
                if (result.status === 'OK') {
                    updateDebug(`‚úÖ Tokenization successful!`, 'success');
                    if (result.token) {
                        updateDebug(`‚úÖ Token: ${result.token.substring(0, 20)}...`, 'success');
                    }
                } else {
                    updateDebug(`‚ùå Tokenization failed with status: ${result.status}`, 'error');
                    if (result.errors && result.errors.length > 0) {
                        result.errors.forEach(error => {
                            updateDebug(`‚ùå Error: ${error.message}`, 'error');
                        });
                    }
                }
            } catch (error) {
                updateDebug(`‚ùå Exception during tokenization: ${error.message}`, 'error');
            }
        }
        
        async function testTokenizeBasic() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            const basicParams = {
                billingContact: {
                    postalCode: postalCode
                }
            };
            
            updateDebug('üîß Testing basic tokenization (no verification details)...');
            updateDebug(`Parameters: ${JSON.stringify(basicParams)}`);
            
            try {
                const result = await card.tokenize(basicParams);
                updateDebug(`Basic result: ${JSON.stringify(result)}`);
                
                if (result.status === 'OK') {
                    updateDebug(`‚úÖ Basic tokenization successful!`, 'success');
                    if (result.token) {
                        updateDebug(`‚úÖ Token: ${result.token.substring(0, 20)}...`, 'success');
                    }
                } else {
                    updateDebug(`‚ùå Basic tokenization failed: ${result.status}`, 'error');
                    if (result.errors) {
                        result.errors.forEach(error => {
                            updateDebug(`‚ùå Error: ${error.message}`, 'error');
                        });
                    }
                }
            } catch (error) {
                updateDebug(`‚ùå Basic tokenization exception: ${error.message}`, 'error');
            }
        }
        
        async function testTokenizeVariations() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            // Test different verification details formats systematically
            const variations = [
                {
                    name: "Format A - String values",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            intent: "STORE",
                            customerInitiated: "true",
                            sellerKeyedIn: "false"
                        }
                    }
                },
                {
                    name: "Format B - CHARGE intent",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            intent: "CHARGE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }
                },
                {
                    name: "Format C - CAPTURE intent",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            intent: "CAPTURE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }
                },
                {
                    name: "Format D - Camel case properties",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            paymentIntent: "STORE",
                            isCustomerInitiated: true,
                            isSellerKeyedIn: false
                        }
                    }
                },
                {
                    name: "Format E - threeDSecureParameters",
                    params: {
                        billingContact: { postalCode },
                        threeDSecureParameters: {
                            intent: "STORE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }
                },
                {
                    name: "Format F - Minimal intent only",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            intent: "STORE"
                        }
                    }
                },
                {
                    name: "Format G - Snake case",
                    params: {
                        billingContact: { postalCode },
                        verification_details: {
                            intent: "STORE",
                            customer_initiated: true,
                            seller_keyed_in: false
                        }
                    }
                },
                {
                    name: "Format H - Original boolean format",
                    params: {
                        billingContact: { postalCode },
                        verificationDetails: {
                            intent: 'STORE',
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }
                }
            ];
            
            updateDebug('üß™ Starting systematic verification format testing...');
            let successCount = 0;
            
            for (const variation of variations) {
                updateDebug(`\nüîß Testing ${variation.name}...`);
                updateDebug(`üìã Parameters: ${JSON.stringify(variation.params, null, 2)}`);
                
                try {
                    const result = await card.tokenize(variation.params);
                    updateDebug(`üìã Result: ${JSON.stringify(result, null, 2)}`);
                    
                    if (result.status === 'OK') {
                        updateDebug(`‚úÖ ${variation.name} SUCCESS!`, 'success');
                        updateDebug(`‚úÖ Token generated: ${result.token ? result.token.substring(0, 20) + '...' : 'None'}`, 'success');
                        successCount++;
                        break; // Stop on first success
                    } else {
                        updateDebug(`‚ùå ${variation.name} failed with status: ${result.status}`, 'error');
                        if (result.errors && result.errors.length > 0) {
                            result.errors.forEach(error => {
                                updateDebug(`   ‚ùå Error: ${error.field} - ${error.message}`, 'error');
                            });
                        }
                    }
                } catch (error) {
                    updateDebug(`‚ùå ${variation.name} exception: ${error.message}`, 'error');
                }
                
                // Small delay between tests
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            updateDebug(`\nüéØ Testing completed. Successful formats: ${successCount}/${variations.length}`);
            if (successCount === 0) {
                updateDebug('üí° Recommendation: Use basic tokenization without verification details for now', 'info');
                updateDebug('üìö Research Square SDK documentation for current verification format', 'info');
            }
        }
        
        async function testProductionCompliantFormat() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            updateDebug('üè≠ Testing production-compliant formats...');
            
            // Based on Square's latest production requirements
            const productionFormats = [
                {
                    name: "Production Format 1 - Exact Square specs",
                    params: {
                        billingContact: {
                            postalCode: postalCode
                        },
                        verificationDetails: {
                            intent: "STORE",
                            customerInitiated: Boolean(true),
                            sellerKeyedIn: Boolean(false)
                        }
                    }
                },
                {
                    name: "Production Format 2 - Forced types",
                    params: {
                        billingContact: {
                            postalCode: String(postalCode)
                        },
                        verificationDetails: {
                            intent: String("STORE"),
                            customerInitiated: Boolean(true),
                            sellerKeyedIn: Boolean(false)
                        }
                    }
                },
                {
                    name: "Production Format 3 - Object.assign",
                    params: Object.assign({}, {
                        billingContact: {
                            postalCode: postalCode
                        },
                        verificationDetails: Object.assign({}, {
                            intent: "STORE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        })
                    })
                },
                {
                    name: "Production Format 4 - JSON parse/stringify",
                    params: JSON.parse(JSON.stringify({
                        billingContact: {
                            postalCode: postalCode
                        },
                        verificationDetails: {
                            intent: "STORE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }))
                },
                {
                    name: "Production Format 5 - Alternative intent values",
                    params: {
                        billingContact: {
                            postalCode: postalCode
                        },
                        verificationDetails: {
                            intent: "ON_FILE",
                            customerInitiated: true,
                            sellerKeyedIn: false
                        }
                    }
                }
            ];
            
            for (const format of productionFormats) {
                updateDebug(`\nüîß Testing ${format.name}...`);
                updateDebug(`üìã Parameters: ${JSON.stringify(format.params, null, 2)}`);
                
                try {
                    const result = await card.tokenize(format.params);
                    updateDebug(`üìã Result: ${JSON.stringify(result, null, 2)}`);
                    
                    if (result.status === 'OK') {
                        updateDebug(`‚úÖ ${format.name} SUCCESS!`, 'success');
                        updateDebug(`‚úÖ Token: ${result.token ? result.token.substring(0, 20) + '...' : 'None'}`, 'success');
                        return result; // Return successful result
                    } else {
                        updateDebug(`‚ùå ${format.name} failed: ${result.status}`, 'error');
                        if (result.errors) {
                            result.errors.forEach(error => {
                                updateDebug(`   ‚ùå ${error.field}: ${error.message}`, 'error');
                            });
                        }
                    }
                } catch (error) {
                    updateDebug(`‚ùå ${format.name} exception: ${error.message}`, 'error');
                }
                
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            updateDebug('\nüí° All production formats failed. This might be an environment configuration issue.', 'error');
            return null;
        }
        
        async function testCorrectSquareFormat() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            updateDebug('üìö Testing OFFICIAL Square documentation format...');
            updateDebug('üìã Using format from: https://developer.squareup.com/docs/web-payments/take-card-payment');            // Correct format for STORE intent (based on error message feedback)
            const correctFormat = {
                billingContact: {
                    postalCode: postalCode
                },
                intent: 'STORE',               // STORE intent does NOT support amount/currencyCode
                customerInitiated: true,       // Boolean: customer initiated
                sellerKeyedIn: false          // Boolean: MOTO flag
            };
            
            updateDebug(`üìã Official format parameters:`);
            updateDebug(`${JSON.stringify(correctFormat, null, 2)}`);
            
            try {
                const result = await card.tokenize(correctFormat);
                updateDebug(`üìã Official format result:`);
                updateDebug(`${JSON.stringify(result, null, 2)}`);
                
                if (result.status === 'OK') {
                    updateDebug('‚úÖ ‚úÖ ‚úÖ OFFICIAL FORMAT SUCCESS! ‚úÖ ‚úÖ ‚úÖ', 'success');
                    updateDebug(`‚úÖ Token generated: ${result.token.substring(0, 20)}...`, 'success');
                    updateDebug('üéâ Verification details are working with official format!', 'success');
                    return result;
                } else {
                    updateDebug('‚ùå Official format failed', 'error');
                    if (result.errors) {
                        result.errors.forEach(error => {
                            updateDebug(`‚ùå ${error.field}: ${error.message}`, 'error');
                        });
                    }
                }
            } catch (error) {
                updateDebug(`‚ùå Official format exception: ${error.message}`, 'error');
            }
            
            return null;
        }
        
        function checkSDKCapabilities() {
            updateDebug('üîç Checking Square SDK capabilities...');
            
            // Check Square object
            if (window.Square) {
                updateDebug(`‚úÖ Square SDK loaded`);
                updateDebug(`üìã Square version: ${window.Square.version || 'Unknown'}`);
                updateDebug(`üìã Square environment: ${window.Square.environment || 'Unknown'}`);
                
                // List available methods
                const squareMethods = Object.getOwnPropertyNames(window.Square);
                updateDebug(`üìã Square methods: ${squareMethods.join(', ')}`);
                
                // Check card object if available
                if (card) {
                    updateDebug(`‚úÖ Card object available`);
                    const cardMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(card));
                    updateDebug(`üìã Card methods: ${cardMethods.join(', ')}`);
                    
                    // Try to inspect tokenize method
                    if (card.tokenize) {
                        updateDebug(`‚úÖ Tokenize method available`);
                        updateDebug(`üìã Tokenize function: ${card.tokenize.toString().substring(0, 200)}...`);
                    }
                } else {
                    updateDebug(`‚ùå Card object not yet initialized`);
                }
            } else {
                updateDebug(`‚ùå Square SDK not loaded`, 'error');
            }
        }
        
        // Auto-init
        document.addEventListener('DOMContentLoaded', initSquare);
    </script>
</body>
</html>
