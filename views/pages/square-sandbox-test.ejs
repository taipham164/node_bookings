<!DOCTYPE html>
<html>
<head>
    <title>Square Sandbox Test</title>
    <!-- Use SANDBOX SDK to test if this is a production requirement issue -->
    <script src="https://sandbox-web.squarecdn.com/v1/square.js"></script>
</head>
<body>
    <h1>Square Sandbox Tokenization Test</h1>
    <p style="color: orange;">‚ö†Ô∏è Testing with SANDBOX SDK to isolate production requirements</p>
    
    <div id="debug-output"></div>
    
    <div>
        <label>Test Card Input:</label>
        <div id="card-container" style="border: 1px solid #ccc; padding: 10px; margin: 10px 0;">
            Loading...
        </div>
    </div>
    
    <div>
        <label>Postal Code:</label>
        <input type="text" id="postal-code" value="12345" />
    </div>
    
    <button onclick="testBasicSandbox()">Test Basic Sandbox Tokenization</button>
    <button onclick="testWithVerificationSandbox()">Test With Verification (Sandbox)</button>
    
    <script>
        // NOTE: Using your production credentials with sandbox SDK for testing
        const APP_ID = '<%= process.env.SQ_APPLICATION_ID %>';
        const LOCATION_ID = '<%= process.env.SQ_LOCATION_ID %>';
        
        let card = null;
        
        function updateDebug(message, type = 'info') {
            const output = document.getElementById('debug-output');
            const time = new Date().toLocaleTimeString();
            const color = type === 'error' ? 'red' : type === 'success' ? 'green' : 'black';
            output.innerHTML += `<div style="color: ${color};">[${time}] ${message}</div>`;
        }
        
        async function initSquare() {
            try {
                updateDebug('üîß Initializing Square with SANDBOX SDK...');
                updateDebug(`App ID: ${APP_ID.substring(0, 15)}...`);
                updateDebug(`Location ID: ${LOCATION_ID}`);
                updateDebug(`SDK URL: ${document.querySelector('script[src*="square"]').src}`);
                
                const payments = window.Square.payments(APP_ID, LOCATION_ID);
                card = await payments.card({
                    includeInputLabels: true
                });
                
                await card.attach('#card-container');
                updateDebug('‚úÖ Sandbox Square SDK initialized and card attached');
                
            } catch (error) {
                updateDebug(`‚ùå Sandbox Square initialization failed: ${error.message}`, 'error');
            }
        }
        
        async function testBasicSandbox() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            updateDebug('üß™ Testing basic sandbox tokenization (no verification)...');
            
            try {
                const result = await card.tokenize({
                    billingContact: {
                        postalCode: postalCode
                    }
                });
                
                updateDebug(`üìã Sandbox result: ${JSON.stringify(result, null, 2)}`);
                
                if (result.status === 'OK') {
                    updateDebug('‚úÖ SANDBOX BASIC TOKENIZATION SUCCESS!', 'success');
                    updateDebug(`‚úÖ Token: ${result.token.substring(0, 20)}...`, 'success');
                } else {
                    updateDebug('‚ùå Sandbox basic tokenization failed', 'error');
                    if (result.errors) {
                        result.errors.forEach(error => {
                            updateDebug(`‚ùå Error: ${error.message}`, 'error');
                        });
                    }
                }
            } catch (error) {
                updateDebug(`‚ùå Sandbox exception: ${error.message}`, 'error');
            }
        }
        
        async function testWithVerificationSandbox() {
            if (!card) {
                updateDebug('‚ùå Card not initialized', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Enter postal code', 'error');
                return;
            }
            
            updateDebug('üß™ Testing sandbox tokenization WITH verification...');
            
            try {
                const result = await card.tokenize({
                    billingContact: {
                        postalCode: postalCode
                    },
                    verificationDetails: {
                        intent: 'STORE',
                        customerInitiated: true,
                        sellerKeyedIn: false
                    }
                });
                
                updateDebug(`üìã Sandbox verification result: ${JSON.stringify(result, null, 2)}`);
                
                if (result.status === 'OK') {
                    updateDebug('‚úÖ SANDBOX VERIFICATION TOKENIZATION SUCCESS!', 'success');
                    updateDebug(`‚úÖ Token: ${result.token.substring(0, 20)}...`, 'success');
                } else {
                    updateDebug('‚ùå Sandbox verification tokenization failed', 'error');
                    if (result.errors) {
                        result.errors.forEach(error => {
                            updateDebug(`‚ùå Error: ${error.message}`, 'error');
                        });
                    }
                }
            } catch (error) {
                updateDebug(`‚ùå Sandbox verification exception: ${error.message}`, 'error');
            }
        }
        
        // Initialize when page loads
        window.addEventListener('load', initSquare);
    </script>
</body>
</html>
