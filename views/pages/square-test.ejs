<!DOCTYPE html>
<html>
<head>
    <title>Square Payment Form Test (v2.1)</title>
    <script src="https://web.squarecdn.com/v1/square.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            padding: 20px; 
            max-width: 600px; 
            margin: 0 auto; 
        }
        .debug-info { 
            background: #f0f0f0; 
            padding: 15px; 
            margin: 10px 0; 
            border-radius: 5px; 
        }
        #card-container { 
            border: 2px solid #ccc; 
            border-radius: 8px; 
            padding: 15px; 
            margin: 20px 0; 
            min-height: 50px; 
        }
        .error { color: red; }
        .success { color: green; }
        button { 
            background: #007bff; 
            color: white; 
            border: none; 
            padding: 10px 20px; 
            border-radius: 5px; 
            cursor: pointer; 
        }
        button:disabled { 
            background: #ccc; 
            cursor: not-allowed; 
        }
    </style>
</head>
<body>
    <h1>Square Payment Form Test</h1>
    
    <div class="debug-info">
        <h3>Debug Information</h3>
        <div id="debug-output"></div>
    </div>
    
    <div>
        <h3>Payment Form</h3>
        <label>Card Details</label>
        <div id="card-container">
            <!-- Square SDK will inject form here -->
            <div style="color: #666; font-style: italic;">Loading Square payment form...</div>
        </div>
        <div id="card-errors" style="color: red; margin-top: 10px; display: none;"></div>
        
        <div style="margin-top: 15px;">
            <label>Postal Code</label>
            <input type="text" id="postal-code" placeholder="12345" style="padding: 8px; width: 100px;">
        </div>
        
        <button id="tokenize-btn" onclick="testTokenize()" disabled style="margin-top: 15px;">
            Test Tokenization
        </button>
    </div>

    <script>
        const APP_ID = '<%= process.env.SQ_APPLICATION_ID %>';
        const LOCATION_ID = '<%= process.env.SQ_LOCATION_ID %>';
        
        let card = null;
        
        function updateDebug(message, type = 'info') {
            const debug = document.getElementById('debug-output');
            const timestamp = new Date().toLocaleTimeString();
            const className = type === 'error' ? 'error' : type === 'success' ? 'success' : '';
            debug.innerHTML += `<div class="${className}">[${timestamp}] ${message}</div>`;
            console.log(message);
        }
        
        async function initializeSquareForm() {
            updateDebug('üîß Starting Square form initialization...');
            
            // Check if Square SDK is loaded
            if (typeof window.Square === 'undefined') {
                updateDebug('‚ùå Square SDK not loaded!', 'error');
                return;
            }
            updateDebug('‚úÖ Square SDK loaded successfully');
            
            // Validate configuration
            if (!APP_ID || APP_ID === 'undefined') {
                updateDebug('‚ùå Application ID not configured!', 'error');
                return;
            }
            if (!LOCATION_ID || LOCATION_ID === 'undefined') {
                updateDebug('‚ùå Location ID not configured!', 'error');
                return;
            }
            
            updateDebug(`‚úÖ App ID: ${APP_ID.substring(0, 15)}...`);
            updateDebug(`‚úÖ Location ID: ${LOCATION_ID}`);
            
            try {
                // Create payments instance
                updateDebug('üîß Creating Square payments instance...');
                const payments = window.Square.payments(APP_ID, LOCATION_ID);
                updateDebug('‚úÖ Payments instance created');                // Create card payment method
                updateDebug('üîß Creating card payment method...');
                card = await payments.card({
                    includeInputLabels: true
                });
                updateDebug('‚úÖ Card payment method created');
                
                // Attach to DOM
                updateDebug('üîß Attaching card form to DOM...');
                await card.attach('#card-container');
                updateDebug('‚úÖ Card form attached successfully!', 'success');
                
                // Enable test button
                document.getElementById('tokenize-btn').disabled = false;
                
            } catch (error) {
                updateDebug(`‚ùå Error: ${error.message}`, 'error');
                document.getElementById('card-container').innerHTML = 
                    `<div style="color: red; text-align: center; padding: 20px;">
                        <strong>Error:</strong> ${error.message}
                    </div>`;
            }
        }
          async function testTokenize() {
            updateDebug('üß™ Starting tokenization test...', 'info');
            
            if (!card) {
                updateDebug('‚ùå Card not initialized!', 'error');
                return;
            }
            
            const postalCode = document.getElementById('postal-code').value;
            if (!postalCode) {
                updateDebug('‚ùå Please enter postal code', 'error');
                return;
            }
            
            updateDebug(`üìù Using postal code: ${postalCode}`, 'info');
              try {
                updateDebug('üîß Testing card tokenization...');
                
                const tokenizeParams = {
                    billingContact: {
                        postalCode: postalCode
                    },
                    verificationDetails: {
                        intent: 'STORE',
                        customerInitiated: true,
                        sellerKeyedIn: false
                    }
                };
                
                updateDebug('üîç Tokenization parameters:', 'info');
                updateDebug(JSON.stringify(tokenizeParams, null, 2), 'info');
                  const result = await card.tokenize(tokenizeParams);
                
                if (result.status === 'OK') {
                    updateDebug(`‚úÖ Tokenization successful!`, 'success');
                    updateDebug(`Full result: ${JSON.stringify(result, null, 2)}`, 'info');
                    
                    if (result.token) {
                        updateDebug(`‚úÖ Token: ${result.token.substring(0, 20)}...`, 'success');
                    } else {
                        updateDebug(`‚úÖ Success but no token property found`, 'success');
                    }
                } else {
                    updateDebug(`‚ùå Tokenization failed: ${result.errors ? result.errors.map(e => e.message).join(', ') : 'Unknown error'}`, 'error');
                }
            } catch (error) {
                updateDebug(`‚ùå Tokenization error: ${error.message}`, 'error');
            }
        }
        
        // Console debugging function
        window.debugTokenization = async function() {
            console.log('üîç Debug Tokenization Test');
            console.log('Card object:', card);
            
            if (!card) {
                console.log('‚ùå No card object available');
                return;
            }
            
            const testParams = {
                billingContact: {
                    postalCode: '12345'
                },
                verificationDetails: {
                    intent: 'STORE',
                    customerInitiated: true,
                    sellerKeyedIn: false
                }
            };
            
            console.log('üîß Test parameters:', testParams);
              try {
                console.log('üß™ Attempting tokenization...');
                const result = await card.tokenize(testParams);
                console.log('‚úÖ Tokenization result:', result);
                
                if (result.token) {
                    console.log('‚úÖ Token extracted:', result.token.substring(0, 20) + '...');
                } else {
                    console.log('‚ö†Ô∏è No token property found in result');
                }
                
                return result;
            } catch (error) {
                console.log('‚ùå Tokenization error:', error);
                return error;
            }
        };
        
        // Make it available globally
        window.testCard = card;
        
        // Initialize when page loads
        document.addEventListener('DOMContentLoaded', function() {
            updateDebug('üìÑ Page loaded, starting initialization...');
            initializeSquareForm();
        });
    </script>
</body>
</html>
